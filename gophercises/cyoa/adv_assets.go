// Code generated by go-bindata.
// sources:
// adventures/gopher.json
// DO NOT EDIT!

package cyoa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adventuresGopherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcd\x92\xdc\x36\x92\xbe\xeb\x29\xd2\x75\xd1\xa5\xba\x0e\x7b\x74\x6c\xac\x42\x6a\xef\x4a\x5a\x5b\xb2\x22\x5a\x1e\x85\x62\x7a\x0e\x49\x22\x49\xc0\x05\x02\x34\x90\x68\x36\xed\xf0\xbb\x4f\x64\x02\xac\x2a\x49\xdd\x63\x5b\x73\x98\x8b\x65\x55\x15\xc1\xfc\xfb\x7e\x12\xfa\xed\x09\xc0\xce\x05\x4e\x71\xf7\x2d\xc8\x5f\x00\x76\xec\xd8\xd3\xee\x5b\xd8\xbd\xb7\x04\x3f\x38\x66\x4f\xf0\xc2\x17\x82\x97\x71\xb6\x94\x76\xfb\xfa\xb3\xcc\x31\xad\xbb\x6f\xe1\xef\xfa\x57\x80\xdd\x8f\xa1\x27\x28\x73\x0c\x80\xc0\x6e\xa2\x3d\xf8\x18\xc6\xfa\x1f\x1c\xe3\x1e\xd8\x52\x22\x58\x30\x03\x82\xaf\xe7\x76\x72\xee\xa8\xe7\x1e\xe0\xc7\x92\x3e\xf9\x7c\x48\x8e\x82\x81\x05\x03\x93\x01\x8e\x30\x46\x90\xd3\x03\xa0\xb9\xa3\xc0\x25\xd1\x1e\xba\xc2\x60\xf5\xd4\xf0\x94\x21\x17\x79\x83\xbe\x47\x7f\x7f\x80\x0f\xce\x7b\x58\x63\x79\xe0\x61\x58\x1c\x5b\xb0\x6e\x7a\xd6\x72\xd2\x24\x08\xe2\x00\xd6\xe5\xf6\xfa\x0c\x51\xf2\x4a\xd4\xc7\x69\xa2\x60\xc8\xc0\x18\x5d\x18\xe5\xfc\xb7\xb4\xc0\xc7\x98\x8e\xf2\xff\x13\x1e\xe9\xf4\x08\x32\xb0\x1c\x31\xad\x99\x29\xb9\x58\xb2\xfc\x3d\x8c\xd0\xa3\xf7\x64\xe0\x76\xf7\x32\xb2\xc5\xe9\x65\xbc\xdd\x1d\xe0\x35\x83\xcb\x90\xcb\x3c\xc7\x5c\x13\xed\x08\x10\x3a\x37\x02\x49\xa8\x35\xce\x21\x11\x41\x5e\x70\x04\x0c\x06\xdc\xd0\xca\xe9\x24\x40\x6a\xc7\xd7\x4a\x66\xf0\xf1\x8e\xc0\xe9\xb1\xfa\x18\x27\x17\x8e\xc4\xf9\x00\x3f\x85\x21\x26\x2e\x01\x99\xfc\xaa\x2d\x69\x0f\xd5\x34\x2d\x61\x32\x80\xd0\xe3\x34\x0f\x2e\x11\x68\x97\x01\xbb\x58\x18\x72\x9c\x08\x3a\x34\x30\x90\xf7\x98\x21\xe0\x24\xe1\x5a\x82\x1b\x76\xfd\x71\x85\x17\x18\x8c\xe3\x0c\x8b\x8d\x80\x3e\x47\xf0\x4e\xe2\x08\xa7\x42\x1d\xe0\x75\xd0\x07\xe4\x58\x47\x52\x15\xca\x04\x63\x59\x33\x2c\xb1\x78\x03\x29\x76\xc0\x71\xd5\x1f\x50\xd6\x54\x99\x52\x8a\xc9\xfd\x4a\xd2\xc6\x30\x42\x17\xd7\xbc\xaf\x45\x90\x98\x8a\xf6\x64\x4e\xc4\xbc\x42\xee\x31\xad\x87\xcb\x76\xea\xeb\xa2\xd4\x0a\x2c\x06\xb3\x97\x61\xb1\x32\x82\x7e\xc1\x35\xb7\x84\xc7\x44\xb5\x65\x61\xcc\x2d\xd9\xef\x28\xdc\xc9\x50\xbe\xd4\xaf\xf2\xd1\x41\xf6\x71\x26\x79\xb3\xd6\xc0\xc6\xfe\x48\x2b\x30\xe1\x54\xfb\xd3\x5b\xc2\x19\xa4\x10\xc4\x2d\x3e\x4b\xda\xc0\xf6\x12\xb6\xb4\x82\xc5\x3b\xe9\x6d\x1f\xc3\x40\x89\xa4\xe4\x74\xdf\xfb\x92\xdd\x1d\xf9\x15\x86\x98\xce\x3d\x74\x47\x92\xe1\xcc\xe4\x87\x03\xbc\xc1\xb5\xa3\x16\x54\x2b\x95\x0e\x49\xc6\x81\x12\xcc\x1e\x7b\x9d\xf8\x3b\x97\x1d\x1f\x76\x9a\xfe\x3f\x1a\x50\xe3\xcc\x2e\x86\x7c\x01\xd5\xdf\xda\x9f\x02\x76\xba\xe7\x8a\x75\xc9\xf2\xa2\xd9\x0f\xb4\xd5\x29\xc4\x12\xa1\xdf\x9f\x86\x2b\x4e\xf0\x4a\xc6\xe2\xb9\x97\x29\xfc\xaf\x6f\xe0\x07\xe2\xa7\x5a\x56\x73\x89\x90\x73\x4b\x00\x76\x98\x7a\x79\x65\xa0\xe5\x6a\x8d\xe9\xb8\x6b\xdf\xfc\xbe\x7f\x3c\xbc\x97\x44\x32\xac\x31\xcb\x00\xd6\x68\xb4\xf3\x5b\xdf\x25\x28\x45\x21\x1d\x5a\x04\xb3\xc7\x55\x07\x04\x07\xaa\x63\x94\x56\x88\xc2\x30\xa5\x3f\xca\x4c\xb6\x06\x3f\x10\x98\xd1\x6f\x4e\x61\xd5\x62\x3e\x69\x01\x9e\xc3\xfe\x92\x30\xff\x26\xd5\x17\x1c\x6e\x69\x3f\xca\x95\x3f\x29\x4d\xa6\xe4\xee\xe4\xe7\x17\x08\x51\xaa\x92\x70\x57\x89\x75\x28\x29\xad\xc0\x09\xef\xc8\x43\x57\x8c\x59\x61\x70\x29\x33\x20\x33\x4d\x33\x4b\xca\x16\x9d\x57\xc4\x76\x9f\xa1\x1b\x42\xec\xa2\x59\x95\x3f\xb3\xd2\xa1\xd3\xd9\x4b\xce\xe8\xac\x08\x9c\xa5\x69\x3a\xbd\x08\xb7\xbb\x99\x58\xe8\xe8\xbd\xcc\xe9\x91\x66\xa9\xdd\x2a\xe1\xc9\x0f\x2b\xbf\x34\x1e\xb0\x64\x8c\x0b\xe3\x1e\x30\x0b\x11\x6d\x13\x2b\x9f\x5f\x60\xef\xa7\xb0\x38\xef\x1b\x55\x62\xdf\xcb\x89\x86\x06\x42\xde\x6b\x96\x73\xf1\x1e\xe4\x3c\x4d\x75\xb6\x12\x8b\x64\x9e\xe8\x97\x42\x92\x63\x8d\xb4\x64\x39\xe2\xbf\x4b\x30\x2e\xf7\x5e\x18\xf2\x0a\xe7\xf9\x7f\x94\x4a\x10\x06\x5a\x20\xdb\x98\x18\x26\x17\x0a\x0b\x65\x40\x8f\x49\x0f\xcf\x50\xe6\xda\x7a\x4b\x60\x92\x13\xe8\x58\xf2\x73\xd6\xd7\xfb\x88\xad\xca\xbe\x8c\x23\x8e\x74\x80\x57\x04\x26\x52\x15\x12\xa2\x09\xd8\x26\xa7\x7c\x5d\xf3\xd6\x1f\xb7\x66\xf4\x71\x9a\x31\xb8\x18\x36\x01\x3a\x3d\x88\x2b\x60\x58\xb5\x5e\x17\xc5\x10\x2d\xdd\x0a\xaf\xe7\xd8\xc8\xe4\x15\x43\xe8\x92\x5f\xa1\x04\xe5\xfa\xa1\xf8\x7d\xed\x88\x04\x4d\xf7\x52\x35\x79\x4b\x1c\x2e\xb3\x30\x29\x06\xa9\x8a\x0a\x9a\xd1\x3f\x34\x42\x1b\x17\x89\xa5\xc3\x24\xfd\xef\x12\xe1\x31\x57\x0a\x32\x6d\xd4\x30\x29\x6c\xe4\xac\xde\xf1\x5a\x69\x2a\x2e\xc0\x6e\xce\x80\x89\x20\x50\x4f\x39\xa3\x8c\x5d\x13\x35\x11\x6b\x79\xf6\x00\xcf\x07\xa6\x04\x08\x8b\x75\x5e\xf5\x65\x24\xce\x1b\x04\xa3\x37\x90\x35\x39\xc8\xde\xcd\x32\xd4\x2a\x18\x84\xa9\x2b\xa6\x52\xb9\x77\x99\x29\x9c\x6a\x30\x95\xec\xfa\x8b\x22\xb5\xf3\x37\x58\x20\x5f\x96\x4a\x0e\xee\x2d\x55\xf0\xa2\xfa\x02\xaf\xca\xab\xb9\x9c\xf9\xb4\xa7\x20\xa7\x54\x13\xb0\xc9\xac\x14\xba\x23\x39\xd4\x92\x37\x3a\xe3\x4d\xac\xfd\x0a\x93\x98\x82\xca\x78\x86\xf2\x51\x67\x84\x4c\x35\x0d\xd4\x62\xe8\xd0\x8c\xb4\x01\x13\xac\xe2\xd2\x69\x26\x5c\x6b\x94\x09\xf9\x32\x95\x3a\x64\xca\x83\x26\x2e\x55\x86\xd0\x65\xaf\x2a\x06\x21\xb2\xeb\xf5\x31\x4e\x18\x46\xd2\x18\x62\x80\xcc\x38\x9e\x10\x39\x61\x3e\xee\xa1\xc7\x99\xaa\x9c\xcc\x31\xca\xa4\x98\x84\x8b\x34\x5c\x84\x5f\x8d\x4a\xe6\x38\x61\x6f\x0f\xf0\x96\xee\x2b\x25\xb8\x49\x12\x46\x3d\x55\xaa\x75\x38\x1c\xe4\x03\x16\x92\x47\x18\xe2\xbd\xe0\x6e\x70\xfc\x0c\x3e\xe8\x47\x62\x97\x54\x89\x79\x89\x60\xc4\xde\x3c\x83\xe7\x52\x62\xf9\x56\x25\xab\x3a\x28\x96\xee\x49\x3d\x44\x94\xc0\x05\x8e\xcf\xbe\x4a\x6b\x9c\x88\x89\x14\x97\x2b\x3d\x44\x58\xc8\x25\xa3\xfa\x77\xa6\xf0\x4e\x99\x4d\x75\x14\x0d\x74\xd8\x1f\xc1\xc6\x89\x1e\xa2\x6c\xf9\xfc\xcf\xe8\x48\x95\xd1\x99\xe2\xec\x09\x7e\x2e\x99\xc1\x24\xca\x19\x86\x12\x42\x6d\xa8\xc0\xc7\x8d\x0a\x0e\x11\x7f\xec\x00\x5b\x77\x35\x94\x4c\xb4\x55\x65\x9e\x29\xe4\x87\xf5\xa3\x43\xa6\xc7\xf4\xa3\x7d\xfb\xb0\xdd\xae\x6e\xe3\xbb\xfa\x93\xc7\xc4\x63\x83\x61\xe7\x58\xc0\x9d\x56\x61\xce\x4c\x62\x9c\xf3\x79\xd8\xa4\x95\x2d\xd1\xd3\x60\x75\x34\xba\x20\x0d\x55\x78\x41\x0d\xe5\x00\x1f\x63\x01\x13\xab\xb8\x8b\x43\xd5\x8e\x4c\x18\x56\xc8\x33\xf5\x6e\x70\x7d\xae\x46\x5b\xfa\xa3\xa0\x4e\x84\x39\x86\x3a\xe2\xd5\xd1\x0c\x44\xca\xf5\xaa\x5f\x62\x1c\x2f\xec\xec\xec\xfa\x23\x64\x67\x28\x7f\x8d\x35\xb9\xf6\x84\x32\xf7\x3a\xbd\x6d\xa2\x25\xc1\xf3\x18\xeb\x4e\x21\x1f\x2d\x2e\x84\x87\x35\x3d\x13\x86\xab\x23\x79\xbf\xfe\x99\x31\x79\xdd\xca\x21\x2c\x7e\x6c\xbe\x63\x50\x9c\x77\x9b\x51\x15\x92\x80\xa9\xf4\x56\x01\x06\x22\x6b\x42\xd2\x99\x13\x85\x91\x6d\xad\x97\x30\x87\xe0\xd7\x6c\xbb\x4c\xdf\x72\x59\x62\xa8\x1b\x82\xd0\xf6\x36\xef\x63\x14\x1e\x1b\x13\x72\xf1\xc8\x6a\xfe\x1e\x4a\x65\xc2\x74\xbc\x92\xc6\xe5\x3f\x93\xca\x8d\x70\xf1\x66\xe8\x14\x43\x1d\x0d\x31\x09\x97\xe9\xdc\x60\x3e\x66\x28\xf9\xd4\x26\xd4\x46\xfd\x21\xc6\x3e\x1b\xea\x8b\xf2\x7e\x39\xd8\xff\x7b\xef\x18\x6e\x74\x00\x7f\xa0\x81\x1f\x9f\xeb\xca\x99\x75\x48\x85\xdd\x65\x9e\xca\xbc\x71\xfc\x10\xef\xaf\xa4\xfd\x8d\x57\x53\xa5\x39\xd9\x5d\x4d\xe9\x4f\x56\x59\x3c\xc9\x0d\x61\x80\xef\x25\x9a\x03\x7c\x50\xad\x5a\xb0\x1a\x33\x17\xc0\xbb\x50\xe9\xcc\x50\xdf\x04\xd9\xc4\xf3\x46\x9a\x28\x13\xa6\xde\xaa\x43\xda\xc0\xce\xeb\x4c\x59\xda\xbb\x88\x45\xd3\xe3\x85\xc2\x02\xc7\x4b\xca\x57\x33\xd2\x7b\xd7\x1f\x33\x48\x03\xd3\x49\x2f\x4c\x8a\xf3\xa5\xcd\x11\x10\x46\xd9\x6a\x44\x89\x84\x09\xcb\xfa\x54\xe8\x5c\x63\x93\x35\xc5\xeb\x62\x77\xbb\xbb\x61\xec\xba\xf5\xba\xf0\x1a\x4b\xf3\x66\xa7\xdd\xa9\x4a\xfe\xc9\x38\x56\x79\x33\xa2\x26\x49\x16\xce\x45\x97\xe0\x54\xe8\x9b\x73\x88\x1f\x1c\x5b\x79\x08\x65\xa6\xcb\x68\xb9\xf2\xba\xb0\x9c\x46\xd7\x56\xc1\xea\x34\x4f\xcc\x2b\xa8\x57\x71\x8c\x12\xf0\xed\xee\xf5\x53\xef\x81\xee\x67\x8f\xd2\x27\x4b\x01\x16\x52\xa5\x6c\x8d\x52\xbd\xbe\xdd\xe9\xd9\x4c\xde\x7f\x3a\xc8\x7f\xac\xf2\x5d\x64\x7b\xea\x8e\xad\xdf\x57\x9a\xb1\x68\x80\x82\x44\x7e\xde\xe2\x0f\xf0\x7f\x6a\x89\xab\x43\xe5\x38\x49\x61\x17\x98\x62\x0a\x97\x7c\x24\x99\xa8\xfe\xab\x82\xfc\x75\x16\xfa\xa8\xf6\x43\xb5\xba\x5a\x73\xef\xa4\x7e\x1c\xc1\x93\x84\x56\x71\x7d\xaa\x59\x2b\x05\xba\x34\x8b\x39\x6d\x94\xd5\x82\xfa\xab\xe8\xba\x40\xfc\x97\xe8\xba\x8e\x99\xcb\x44\xf0\xde\x4d\x7f\x24\x19\xdc\x30\x75\xf2\x97\x0b\x86\x80\x9d\x92\x35\x25\x4b\x29\x6a\xaf\x37\x83\xa7\x8e\x4b\xd8\xbe\x26\x99\x42\xed\x86\x0c\xac\xac\xfe\x32\xa1\x6f\x30\x1d\xe1\x85\x44\x56\x2d\x0a\x0a\x79\xd4\xb5\x50\x7e\xd6\xb7\xd8\x62\x97\x29\x67\xf1\xb1\x32\xbf\x44\x53\x5b\x6f\x11\x82\xd8\xa0\xd6\xd2\xb1\x5c\xae\xee\xaf\x19\xb8\xa4\x90\x95\x44\xf5\x3d\xb2\xb6\x77\x24\xe3\x16\xd3\xb1\xd9\x5f\x25\xd1\x39\xc5\x9f\xa9\xe7\xed\x76\xe5\x45\x19\x06\xf4\x71\x5b\xc1\x5d\x16\x5b\x37\x53\xaa\x5b\x91\x8f\x51\x1f\xae\x99\x4e\x98\xfb\xc8\x6a\xfd\xd5\x27\xcf\x25\xf5\x16\x45\xb7\xce\x77\x54\xed\xb8\xaa\x35\x95\xd8\xeb\xfa\x2b\x32\x99\x27\x11\x4c\x39\xec\xa1\x29\xdf\x5e\x16\xc5\xb5\x57\xa3\x5a\x2b\xb2\x8d\x65\x4f\x89\x05\x46\x22\x62\x2a\x39\x22\x67\x6b\x2c\xf5\x35\x98\xeb\xba\xda\x24\x07\xeb\xad\xce\x25\x54\xcf\x7b\x88\x3c\x58\x0f\x9a\x29\x0d\xd4\xb3\xb0\x9f\xd6\xed\x97\xe2\xfa\xa3\x5f\x21\x07\xf1\x2c\xa6\x6d\x4d\xb3\x8d\x1c\xf3\x1e\xa6\x32\x75\xfe\xa1\x35\xef\x79\xb6\x9e\x56\x78\xd3\xbf\xc5\x09\x93\xb8\x85\xec\x46\xc5\x94\x4a\x89\xac\x68\x5b\x69\xb6\xac\xe8\x93\x8d\x7a\xf7\x46\x2c\x44\xbb\x5b\x71\x13\xd5\x05\x43\x30\xac\x03\xa8\xb1\xa9\xaf\x45\xdf\xfc\x85\x54\x45\xd7\xa0\x82\xde\xcb\xae\xdb\x16\x61\x25\xf6\x58\x31\xe4\x31\x33\x04\x05\x5f\x1c\x6a\x2d\x32\xe3\xfa\x35\x98\x7e\x27\x72\xd8\xec\xfd\x98\x3f\x01\x6f\x47\xe6\x00\x1f\x68\x73\x37\x7a\x89\xd9\x20\xff\xef\x61\xb9\x5d\x2e\x7c\x89\xe3\x57\xf5\x42\x49\x82\xb8\x39\x3a\xb8\xd1\xdb\xa6\x47\x01\xfd\x51\xe7\x27\xb5\xfb\xb5\x76\x2f\xa4\x06\x95\x31\x9d\x56\x55\x37\x43\xb7\xea\x65\x41\x30\xd5\xf2\xb5\x6b\xab\x11\xc5\x66\x8b\x9a\x3c\xbf\x43\x8f\xa1\xb7\xb5\x31\x08\x49\xa1\x98\xab\xbf\xd3\x5a\xaf\x84\xe9\xd4\x9e\xcf\x34\xc2\x65\xb0\x71\xa6\xa1\xf8\xca\x0d\x7a\xc7\x25\x6b\xbf\x68\x6a\x47\xac\xac\x23\x10\x95\x43\x14\x65\x7a\x2f\xd8\xc4\xa3\x6d\x24\x15\xa3\xec\x12\x19\xbd\x7b\x25\x4c\xe7\x29\xbc\xdd\xbd\x5f\xa2\x8e\x8f\x58\x88\x20\x13\x79\x5d\x66\xa1\xe2\x69\x96\xb1\x7f\x67\x9d\x87\xef\x29\x67\xf2\x87\xdb\x9d\x5a\xd9\x5c\xc4\xb6\xf2\xe5\xe1\x99\x25\xa6\x13\xa4\x33\x7a\xbe\xbc\xe8\x7a\x47\x61\x2c\x12\x4f\x47\xc8\xdb\x84\xdf\x60\x80\xff\x17\xe7\x77\x63\x31\x1d\xf3\xd6\xf7\x8b\x28\xce\x43\x7b\xf6\x12\x7a\xc9\x22\xce\x04\xeb\xfe\xfd\xd9\x1d\x40\x90\x15\xcd\xe0\x7a\xde\x0e\x9b\x52\xd4\xdb\x45\x6d\x61\xe7\xf1\x57\x6a\x28\xe5\x84\xce\xe7\x6a\xd1\x7b\x0c\x60\x68\x70\xc1\x29\x91\x55\x77\xb2\x6e\xcd\x17\xba\xad\xfc\x27\xc7\xdd\xee\xde\x38\x4f\x57\xaf\xdc\x68\xe1\xda\xf1\x2a\xe6\xe1\x65\x4c\x23\x89\x35\x98\x62\x09\xca\x3a\xb9\xa7\x40\x69\x3d\x5d\x5e\x28\xdb\xeb\x25\x8b\xda\x22\xca\x7d\x72\x9d\xfa\xa6\xcb\xdd\x56\x63\x89\x41\xa8\x3e\xd5\x95\x5c\x29\xae\xb4\x4b\xef\xfa\xcf\x04\xd7\x97\xeb\x41\xbd\x00\xcd\xb1\x1a\x66\xad\x7b\x23\xb8\x4a\x4e\x6d\xb1\xaf\x08\x77\x09\x16\xea\xb2\xe3\x7a\x51\xfb\xe5\xd0\xdd\x11\xc7\x16\x14\x5c\xa8\x04\x9f\xae\x76\xc5\x85\xbb\x9e\xf7\x70\xbb\x7b\x1b\xe1\x66\xc6\x9e\xe0\x03\xfa\x63\xbe\xdd\xc1\x1c\xbd\xeb\xd7\x7d\xbb\x69\x1a\x4a\xa6\x5c\xf1\xee\x1d\xdd\x35\xbf\x51\xd9\x5d\xd7\x43\x14\x77\x34\x5b\xd7\x6f\xf4\xd3\x42\xfb\xac\xad\x0b\xd1\x99\x67\x07\x2f\xf6\xac\xab\x58\x6e\x6e\x5b\x4a\x71\x0c\x71\x69\xfc\xad\x4c\x38\x63\x7f\x61\x71\x75\x18\xbe\xd6\x9d\xfc\x27\x98\x4c\xbf\x7b\x88\xc7\x04\xaa\x0b\x11\xeb\xcd\xf0\xbf\x62\xb0\xd3\x3f\xf7\x7c\xd2\x5e\xb6\x18\x8e\x75\x15\x50\xe7\x89\x5a\x24\x81\xd4\x67\xff\x7e\x73\x80\x77\x94\x2c\xce\xb9\xa2\x4a\x28\xa6\x7a\x16\x0c\x2a\xbc\x6a\xd0\xdb\x85\x9d\xaf\x8c\x92\x22\x1a\xb8\x3a\x0f\xa6\x5a\xcd\xed\x7a\x1e\xf9\x74\x95\x29\xed\xd1\x45\xd8\x12\x24\x59\x5c\x5c\x80\x6b\xeb\x02\x3e\xde\x1c\x2d\xcc\x93\xdf\x9f\xfc\x33\x00\x00\xff\xff\xd0\x23\x14\x43\x53\x1b\x00\x00")

func adventuresGopherJsonBytes() ([]byte, error) {
	return bindataRead(
		_adventuresGopherJson,
		"adventures/gopher.json",
	)
}

func adventuresGopherJson() (*asset, error) {
	bytes, err := adventuresGopherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "adventures/gopher.json", size: 6995, mode: os.FileMode(438), modTime: time.Unix(1568533981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"adventures/gopher.json": adventuresGopherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"adventures": &bintree{nil, map[string]*bintree{
		"gopher.json": &bintree{adventuresGopherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
